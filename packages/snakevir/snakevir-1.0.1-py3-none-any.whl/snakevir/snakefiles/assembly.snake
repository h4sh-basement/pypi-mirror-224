R1list=expand("FilteredFastq/{smp}.notCombined_1.fastq",smp=SAMPLES)
R2list=expand("FilteredFastq/{smp}.notCombined_2.fastq",smp=SAMPLES)
PElist=expand("FilteredFastq/filtered_{smp}_merged_widows.fastq",smp=SAMPLES)


rule Megahit_Assembly:
    input:
        R1s = expand("FilteredFastq/{smp}.notCombined_1.fastq",smp=SAMPLES),
        R2s = expand("FilteredFastq/{smp}.notCombined_2.fastq",smp=SAMPLES),
        PEs = expand("FilteredFastq/filtered_{smp}_merged_widows.fastq",smp=SAMPLES)
    params:
        prefix="Assembly_results",
        commaR1s = ",".join(R1list),
        commaR2s = ",".join(R2list),
        commaPEs = ",".join(PElist)
    output:
        assembly = "Assembly_results/{RUN}.contigs.fa"
    log:
        "logs/logsAssembly/Megahit_{RUN}.log"
    threads: threads_Megahit_Assembly
    shell:
        """
        touch Assembly_results/{wildcards.RUN}.contigs.fa
        megahit -t {threads}  --mem-flag 2 -m 1 -1 {params.commaR1s} -2 {params.commaR2s} -r {params.commaPEs} -o Assembly_results_tmp --out-prefix {wildcards.RUN} --continue  2> {log}
        rm -r Assembly_results
        mv Assembly_results_tmp Assembly_results
        """

rule Cap3_Assembly:
    input:
        raw_assembly = rules.Megahit_Assembly.output.assembly
    output:
        assembly="Assembly_results/{RUN}_Assembly_results",
        contig="Assembly_results/{RUN}.contigs.fa.cap.contigs",
        sig="Assembly_results/{RUN}.contigs.fa.cap.singlets"
    log:
        "logs/logsAssembly/CAP3_{RUN}.log"
    shell:
        """
        cap3 {input.raw_assembly}>{output.assembly} 2> {log}
        """

rule Merge_Mega_cap_contigs:
    input:
        contig = rules.Cap3_Assembly.output.contig,
        sig = rules.Cap3_Assembly.output.sig
    output:
        final_assembly = "Assembly_results/{RUN}_contigs_assembly_results.fa"
    shell:
        """
        cat {input.contig} {input.sig} > {output.final_assembly}
        """

rule Assembly_informations:
    input:
        assembly = rules.Merge_Mega_cap_contigs.output.final_assembly
    output:
        stat_assembly = "logs/logsAssembly/{RUN}_assembly_stats.txt"
    shell:
        """
        bioawk -c fastx '{{ print $name, length($seq) }}' {input.assembly} | sed 's/      / /g' > {output.stat_assembly}
        """

rule Index_Assembly:
    input:
        assembly = rules.Merge_Mega_cap_contigs.output.final_assembly
    output:
        index = "Assembly_results/{RUN}_contigs_assembly_results.fa.bwt"
    shell:
        """
        bwa index {input.assembly} > {output.index}
        """
