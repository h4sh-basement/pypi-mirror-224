#Remove sequencing adapters based on 5' and 3' sequences (A3 and A5 in the config.yaml file)
#-n Trimming n adapter from each read ; -g Regular 5’ adapter; -a Regular 3’ adapter ; -j num core 0=auto number of available ; -o output
rule Remove_sequencing_adapters:
    input:
        fastq = datadir+"{readfile}"+ext
    output:
       cutadapt_file =  "cutadaptfiles/{readfile}.trimmed.fastq"
    log:
        log="logs/logscutadapt/{readfile}_cut1.log"
    params:
        A3 = config["A3"],
        A5 = config["A5"]
    shell:
        """
        cutadapt -n 10 -g {params.A5} -a {params.A3} -j 0 --overlap 15  {input.fastq} -o {output.cutadapt_file} &> {log.log}
        """

# Quality trimming based on the --quality-cutoff (low-quality ends) -q parameter to change the cutoff
#and --minimum-length -m option to Discard processed reads that are shorter than the length specified.
# -q quality-cutoff 5',3' ; -j num core 0=auto number of available ; m minimum-length ; -o output
rule Quality_trimming:
    input:
        cutadapt_file = rules.Remove_sequencing_adapters.output.cutadapt_file
    output:
        fastq_trim = "cutadaptfiles/{readfile}.clean.fastq"
    log:
        "logs/logscutadapt/{readfile}_cut2.log"
    benchmark:
        "benchmarks/{readfile}.cut2.benchmark.txt"
    shell:
        """
        cutadapt -q 30,30 -j 0 -m 40 -o {output.fastq_trim} {input.cutadapt_file} &> {log}
        """

# Resynchronize 2 fastq or fastq.gz files (R1 and R2) after they have been trimmed and cleaned.
rule Repair_Pairs:
    input:
        R1="cutadaptfiles/{smp}"+ext_R1+".clean.fastq",
        R2="cutadaptfiles/{smp}"+ext_R2+".clean.fastq"
    output:
        R1="cutadaptfiles/{smp}"+ext_R1+".clean.fastq_pairs_R1.fastq",
        R2="cutadaptfiles/{smp}"+ext_R2+".clean.fastq_pairs_R2.fastq",
        WI="cutadaptfiles/{smp}"+ext_R1+".clean.fastq_singles.fastq"
    params:
        scriptdir+"fastqCombinePairedEnd.py"
    log:
        "logs/logsRepairspairs/{smp}_repair.log"
    benchmark:
        "benchmarks/{smp}.cut2.benchmark.txt"
    shell:
        """
        python2 {params} {input.R1} {input.R2}  2> {log}
        """

 # Host-homologous sequence cleaning by mapping (bwa) on ribosomal sequences.
rule Map_On_host:
    input:
        host = config["rRNA_host"],
        hostindex = config["rRNA_host"]+".bwt",
        R1 = rules.Repair_Pairs.output.R1,
        R2 = rules.Repair_Pairs.output.R2,
        WI = rules.Repair_Pairs.output.WI
    output:
        bam_pairs="HostMapping/{smp}_dipteria_pairs.bam",
        bam_WI="HostMapping/{smp}_dipteria_widows.bam",
        sam_pairs="HostMapping/unmapped_{smp}_dipteria_pairs.sam",
        sam_WI="HostMapping/unmapped_{smp}_dipteria_widows.sam"
    benchmark:
        "benchmarks/{smp}.Map_Pairs_On_host.benchmark.txt"
    log:
        "logs/logsMapHost/{smp}_bwa_pairs_on_dipt.log"
    threads: threads_Map_On_host
    shell:
        """
        if [ -s {input.R1} ] && [ -s {input.R2} ]
        then
            bwa mem -t {threads} {input.host} {input.R1} {input.R2} 2> {log} |samtools view -b - | tee {output.bam_pairs} | samtools view -f 0x4 -> {output.sam_pairs}
        else
            echo "{input.R1} or {input.R2} is empty."
            touch {output.bam_pairs}
            touch {output.sam_pairs}
        fi

        if [ -s {input.WI} ]
        then
        bwa mem -t {threads} {input.host} {input.WI} 2> {log} | samtools view -b - | tee {output.bam_WI} | samtools view -f 0x4 -> {output.sam_WI}
        else
            echo "{input.WI} is empty."
            touch {output.bam_WI}
            touch {output.sam_WI}
        fi
        """

# Extact samples squences with with no homologous sequences with the host.
rule Extract_Unmapped_host_Reads:
    input:
        sam_pairs = rules.Map_On_host.output.sam_pairs,
        sam_WI = rules.Map_On_host.output.sam_WI
    output:
        pairs_R1="FilteredFastq/filtered_diptera_{smp}_R1.fastq",
        pairs_R2="FilteredFastq/filtered_diptera_{smp}_R2.fastq",
        WI="FilteredFastq/filtered_diptera_{smp}_widows.fastq"
    benchmark:
        "benchmarks/{smp}.Extract_Unmapped_diptera_Reads.benchmark.txt"
    shell:
        """
        if [ -s {input.sam_pairs} ]
        then
            picard SamToFastq VALIDATION_STRINGENCY=SILENT I={input.sam_pairs} F={output.pairs_R1} F2={output.pairs_R2}
        else
            echo "{input.sam_pairs} or {input.sam_WI} is empty."
            touch {output.pairs_R1}
            touch {output.pairs_R2}
        fi
        if [ -s {input.sam_WI} ]
        then
            picard SamToFastq VALIDATION_STRINGENCY=SILENT I={input.sam_WI} F={output.WI}
        else
            echo "{input.sam_WI} is empty."
            touch {output.WI}
        fi
        """

# Bacterial-homologous sequences cleaning by mapping (bwa) on ribosomal sequences.
rule Map_On_bacteria:
    input:
        host = config["rRNA_bact"],
        hostindex = config["rRNA_bact"]+".bwt",
        pairs_R1 = rules.Extract_Unmapped_host_Reads.output.pairs_R1,
        pairs_R2 = rules.Extract_Unmapped_host_Reads.output.pairs_R2,
        WI = rules.Extract_Unmapped_host_Reads.output.WI
    output:
        bam_pairs="HostMapping/{smp}_bacteria_pairs.bam",
        bam_WI="HostMapping/{smp}_bacteria_widows.bam",
        sam_pairs="HostMapping/unmapped_{smp}_bacteria_pairs.sam",
        sam_WI="HostMapping/unmapped_{smp}_bacteria_widows.sam"
    benchmark:
        "benchmarks/{smp}.Map_Pairs_On_bact.benchmark.txt"
    log:
        "logs/logsMapBact/{smp}_bwa_pairs_on_bact.log"
    threads: threads_Map_On_bacteria
    shell:
        """

        if [ -s {input.pairs_R1} ] && [ -s {input.pairs_R2} ]
        then
            bwa mem -t {threads} {input.host} {input.pairs_R1} {input.pairs_R2} 2> {log} | samtools view -b -  | tee {output.bam_pairs} |  samtools view -f 0x4 -> {output.sam_pairs}
        else
            echo "{input.pairs_R1} or {input.pairs_R2} is empty."
            touch {output.bam_pairs}
            touch {output.sam_pairs}
        fi

        if [ -s {input.WI} ]
        then
        bwa mem -t {threads} {input.host} {input.WI} 2> {log} | samtools view -b - | tee {output.bam_WI} | samtools view -f 0x4 -> {output.sam_WI}
        else
            echo "{input.WI} is empty."
            touch {output.bam_WI}
            touch {output.sam_WI}
        fi
        """

# Extact samples squences with with no homologous sequences with bacteria.
rule Extract_Unmapped_bact_Reads:
    input:
        sam_pairs = rules.Map_On_bacteria.output.sam_pairs,
        sam_WI =  rules.Map_On_bacteria.output.sam_WI
    output:
        pairs_R1="FilteredFastq/filtered_bacteria_{smp}_R1.fastq",
        pairs_R2="FilteredFastq/filtered_bacteria_{smp}_R2.fastq",
        WI="FilteredFastq/filtered_bacteria_{smp}_widows.fastq"
    benchmark:
        "benchmarks/{smp}.Extract_Unmapped_bacteria_Reads.benchmark.txt"
    shell:
        """
        if [ -s {input.sam_pairs} ]
        then
            picard  SamToFastq VALIDATION_STRINGENCY=SILENT I={input.sam_pairs} F={output.pairs_R1} F2={output.pairs_R2}
        else
            echo "{input.sam_pairs} is empty."
            touch {output.pairs_R1}
            touch {output.pairs_R2}
        fi
        if [ -s {input.sam_WI} ]
        then
            picard SamToFastq  VALIDATION_STRINGENCY=SILENT I={input.sam_WI} F={output.WI}
        else
            echo "{input.sam_WI} is empty."
            touch {output.WI}
        fi
        """
 # Extract some stats (logs) from the cleaning steps
rule log_map_conta:
    input:
        host_pairs_R1 = rules.Extract_Unmapped_host_Reads.output.pairs_R1,
        host_pairs_R2 = rules.Extract_Unmapped_host_Reads.output.pairs_R2,
        host_WI = rules.Extract_Unmapped_host_Reads.output.WI,
        bact_pairs_R1 = rules.Extract_Unmapped_bact_Reads.output.pairs_R1,
        bact_pairs_R2 = rules.Extract_Unmapped_bact_Reads.output.pairs_R2,
        bact_WI = rules.Extract_Unmapped_bact_Reads.output.WI
    output:
        stat_conta = "logs/logs_contaminent/Stats_contaminent_{smp}.txt"
    shell:
        """
        awk '{{s++}}END{{print "Host_pair_R1 : " s/4}}' {input.host_pairs_R1} >> {output.stat_conta};
        awk '{{s++}}END{{print "Host_pairs_R2 : " s/4}}' {input.host_pairs_R2} >> {output.stat_conta};
        awk '{{s++}}END{{print "Host_pair_wi : " s/4}}' {input.host_WI} >> {output.stat_conta};
        awk '{{s++}}END{{print "bact_pair_R1 : " s/4}}' {input.bact_pairs_R1} >> {output.stat_conta};
        awk '{{s++}}END{{print "bact_pairs_R2 : " s/4}}' {input.bact_pairs_R2} >> {output.stat_conta};
        awk '{{s++}}END{{print "bact_pair_wi : " s/4}}' {input.bact_WI} >> {output.stat_conta};
        """

# Merge paired-end reads , 3 files where created on with de merde pairs and two for the unmerged R1 and R2
rule Merge_Pairs_With_Flash:
    input:
        pairs_R1 = rules.Extract_Unmapped_host_Reads.output.pairs_R1,
        pairs_R2 = rules.Extract_Unmapped_host_Reads.output.pairs_R2
    params:
        prefix="FilteredFastq/{smp}",
        flash=scriptdir+"flash"
    output:
        ext="FilteredFastq/{smp}.extendedFrags.fastq",
        R1="FilteredFastq/{smp}.notCombined_1.fastq",
        R2="FilteredFastq/{smp}.notCombined_2.fastq"
    benchmark:
        "benchmarks/{smp}.Merge_Pairs_With_Flash.benchmark.txt"
    log:
        "logs/logsFLASH/{smp}_flash.log"
    shell:
        """
        flash -M 250 {input.pairs_R1} {input.pairs_R2} -o {params.prefix} &> {log}
        """

# Create a single file for merge and windows reads
rule Concatenate_Widows_And_Merged:
    input:
        Merged = rules.Merge_Pairs_With_Flash.output.ext,
        WI = rules.Extract_Unmapped_bact_Reads.output.WI
    output:
        final = "FilteredFastq/filtered_{smp}_merged_widows.fastq"
    benchmark:
        "benchmarks/{smp}.Concatenate_Widows_And_Merged.benchmark.txt"
    shell:
        """
        cat {input.Merged} {input.WI} > {output.final}
        """


#At the end of this first cleaning step, three fastq files are produced. A merger reads and widows reads file (... merged_widows.fastq) and two files for unconcanate read  (...notCombined_1.fastq, ...notCombined_2.fastq")
