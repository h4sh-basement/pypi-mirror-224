"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by: https://openapi-generator.tech
"""


import sys
import unittest
from datetime import datetime, date
import pytest

import freeclimb

from freeclimb.model.sms_ten_dlc_campaign import SMSTenDLCCampaign  # noqa: E501


class TestSMSTenDLCCampaign(unittest.TestCase):
    """SMSTenDLCCampaign unit test stubs"""

    def setUp(self):
        self.model = SMSTenDLCCampaign(campaign_id="TEST_STRING",
                                       csp_id="TEST_STRING",
                                       brand_id="TEST_STR",
                                       usecase="TEST_STRING",
                                       sub_usecases=[],
                                       description="TEST_STRING",
                                       mock=True)

    def test_account_id(self):
        """Test SMSTenDLCCampaign.account_id"""
        self.model.account_id = "TEST_STRING"
        assert self.model.get("account_id") == "TEST_STRING"

    def test_campaign_id(self):
        """Test SMSTenDLCCampaign.campaign_id"""
        self.model.campaign_id = "TEST_STRING"
        assert self.model.get("campaign_id") == "TEST_STRING"

    def test_csp_id(self):
        """Test SMSTenDLCCampaign.csp_id"""
        self.model.csp_id = "TEST_STRING"
        assert self.model.get("csp_id") == "TEST_STRING"

    def test_reseller_id(self):
        """Test SMSTenDLCCampaign.reseller_id"""
        self.model.reseller_id = "TEST_STR"
        assert self.model.get("reseller_id") == "TEST_STR"

    def test_status(self):
        """Test SMSTenDLCCampaign.status"""

        self.model.status = "ACTIVE"
        assert self.model.get("status") == "ACTIVE"

        self.model.status = "EXPIRED"
        assert self.model.get("status") == "EXPIRED"

    def test_status_throws_on_invalid_enum(self):
        with pytest.raises(Exception) as info:
            self.model.status = "INVALID_ENUM"
        exception_raised = info.value
        assert exception_raised.__class__.__name__ == freeclimb.ApiValueError.__name__

    def test_create_date(self):
        """Test SMSTenDLCCampaign.create_date"""
        self.model.create_date = datetime.fromtimestamp(1691592436)
        assert self.model.get(
            "create_date") == datetime.fromtimestamp(1691592436)

    def test_auto_renewal(self):
        """Test SMSTenDLCCampaign.auto_renewal"""
        self.model.auto_renewal = False
        assert self.model.get("auto_renewal") == False

    def test_billed_date(self):
        """Test SMSTenDLCCampaign.billed_date"""
        self.model.billed_date = datetime.fromtimestamp(1691592436)
        assert self.model.get(
            "billed_date") == datetime.fromtimestamp(1691592436)

    def test_brand_id(self):
        """Test SMSTenDLCCampaign.brand_id"""
        self.model.brand_id = "TEST_STR"
        assert self.model.get("brand_id") == "TEST_STR"

    def test_usecase(self):
        """Test SMSTenDLCCampaign.usecase"""
        self.model.usecase = "TEST_STRING"
        assert self.model.get("usecase") == "TEST_STRING"

    def test_sub_usecases(self):
        """Test SMSTenDLCCampaign.sub_usecases"""

        testSet = []
        self.model.sub_usecases = testSet
        assert self.model.get("sub_usecases") == testSet

    def test_description(self):
        """Test SMSTenDLCCampaign.description"""
        self.model.description = "TEST_STRING"
        assert self.model.get("description") == "TEST_STRING"

    def test_embedded_link(self):
        """Test SMSTenDLCCampaign.embedded_link"""
        self.model.embedded_link = False
        assert self.model.get("embedded_link") == False

    def test_embedded_phone(self):
        """Test SMSTenDLCCampaign.embedded_phone"""
        self.model.embedded_phone = False
        assert self.model.get("embedded_phone") == False

    def test_affiliate_marketing(self):
        """Test SMSTenDLCCampaign.affiliate_marketing"""
        self.model.affiliate_marketing = False
        assert self.model.get("affiliate_marketing") == False

    def test_number_pool(self):
        """Test SMSTenDLCCampaign.number_pool"""
        self.model.number_pool = False
        assert self.model.get("number_pool") == False

    def test_age_gated(self):
        """Test SMSTenDLCCampaign.age_gated"""
        self.model.age_gated = False
        assert self.model.get("age_gated") == False

    def test_direct_lending(self):
        """Test SMSTenDLCCampaign.direct_lending"""
        self.model.direct_lending = False
        assert self.model.get("direct_lending") == False

    def test_subscriber_optin(self):
        """Test SMSTenDLCCampaign.subscriber_optin"""
        self.model.subscriber_optin = False
        assert self.model.get("subscriber_optin") == False

    def test_subscriber_optout(self):
        """Test SMSTenDLCCampaign.subscriber_optout"""
        self.model.subscriber_optout = False
        assert self.model.get("subscriber_optout") == False

    def test_subscriber_help(self):
        """Test SMSTenDLCCampaign.subscriber_help"""
        self.model.subscriber_help = False
        assert self.model.get("subscriber_help") == False

    def test_sample1(self):
        """Test SMSTenDLCCampaign.sample1"""
        self.model.sample1 = "TEST_STRING"
        assert self.model.get("sample1") == "TEST_STRING"

    def test_sample2(self):
        """Test SMSTenDLCCampaign.sample2"""
        self.model.sample2 = "TEST_STRING"
        assert self.model.get("sample2") == "TEST_STRING"

    def test_sample3(self):
        """Test SMSTenDLCCampaign.sample3"""
        self.model.sample3 = "TEST_STRING"
        assert self.model.get("sample3") == "TEST_STRING"

    def test_sample4(self):
        """Test SMSTenDLCCampaign.sample4"""
        self.model.sample4 = "TEST_STRING"
        assert self.model.get("sample4") == "TEST_STRING"

    def test_sample5(self):
        """Test SMSTenDLCCampaign.sample5"""
        self.model.sample5 = "TEST_STRING"
        assert self.model.get("sample5") == "TEST_STRING"

    def test_message_flow(self):
        """Test SMSTenDLCCampaign.message_flow"""
        self.model.message_flow = "TEST_STRING"
        assert self.model.get("message_flow") == "TEST_STRING"

    def test_help_message(self):
        """Test SMSTenDLCCampaign.help_message"""
        self.model.help_message = "TEST_STRING"
        assert self.model.get("help_message") == "TEST_STRING"

    def test_reference_id(self):
        """Test SMSTenDLCCampaign.reference_id"""
        self.model.reference_id = "TEST_STRING"
        assert self.model.get("reference_id") == "TEST_STRING"

    def test_mock(self):
        """Test SMSTenDLCCampaign.mock"""
        self.model.mock = False
        assert self.model.get("mock") == False

    def test_next_renewal_or_expiration_date(self):
        """Test SMSTenDLCCampaign.next_renewal_or_expiration_date"""
        self.model.next_renewal_or_expiration_date = date.fromtimestamp(
            1691592436)
        assert self.model.get(
            "next_renewal_or_expiration_date") == date.fromtimestamp(1691592436)


if __name__ == '__main__':
    unittest.main()
