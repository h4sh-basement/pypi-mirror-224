import os
import sys
import datetime
from loguru import logger
from public.path import Project
from public.constants import LogConfig

class Log:

    __instance = None

    DATE = datetime.datetime.now().strftime('%Y-%m-%d')

    if not os.path.isdir(Project.LOG_DIR): os.makedirs(Project.LOG_DIR)
    log_file = os.path.join(Project.LOG_DIR,f'{DATE}.log')

    def __new__(cls, *args, **kwargs):
        if not cls.__instance:
            cls.__instance = super(Log, cls).__new__(cls, *args, **kwargs)
        return cls.__instance

    def __init__(self,is_stdout=True,write_log=True):
        self.logger = logger
        if is_stdout:
            self.logger.remove()
            self.logger.add(
                sink=sys.stdout,
                format=LogConfig.CONSOLE_FORMAT,
                level=LogConfig.CONSOLE_HANDLER_DEFAULT_LEVEL,
            )
        if write_log:
            # self.logger.remove(handler_id=None) #只写入文件中，不输入控制台
            self.logger.add(
                sink=self.log_file,
                retention=LogConfig.RETENTION,
                rotation=LogConfig.ROTATION,
                compression=LogConfig.COMPRESSION,
                encoding="utf-8",
                enqueue=LogConfig.ENQUEUE,
                backtrace=LogConfig.BACKTRACE,
                level=LogConfig.FILE_HANDLER_DEFAULT_LEVEL,
                format=LogConfig.FILE_FORMAT
            )

logger = Log().logger