# coding: utf-8

"""
    Model API

    Model API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field

class TrainModelRawSuccess(BaseModel):
    """
    TrainModelRawSuccess
    """
    number_of_trainable_tokens: Optional[Any] = Field(..., alias="numberOfTrainableTokens")
    sum_loss: Optional[Any] = Field(..., alias="sumLoss")
    __properties = ["numberOfTrainableTokens", "sumLoss"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TrainModelRawSuccess:
        """Create an instance of TrainModelRawSuccess from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if number_of_trainable_tokens (nullable) is None
        # and __fields_set__ contains the field
        if self.number_of_trainable_tokens is None and "number_of_trainable_tokens" in self.__fields_set__:
            _dict['numberOfTrainableTokens'] = None

        # set to None if sum_loss (nullable) is None
        # and __fields_set__ contains the field
        if self.sum_loss is None and "sum_loss" in self.__fields_set__:
            _dict['sumLoss'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TrainModelRawSuccess:
        """Create an instance of TrainModelRawSuccess from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TrainModelRawSuccess.parse_obj(obj)

        _obj = TrainModelRawSuccess.parse_obj({
            "number_of_trainable_tokens": obj.get("numberOfTrainableTokens"),
            "sum_loss": obj.get("sumLoss")
        })
        return _obj

