# coding: utf-8

"""
    Model API

    Model API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field
from preemo.models.train_model_request_body_training_arguments import TrainModelRequestBodyTrainingArguments

class TrainModelRequestBody(BaseModel):
    """
    TrainModelRequestBody
    """
    samples: Optional[Any] = Field(...)
    training_arguments: TrainModelRequestBodyTrainingArguments = Field(..., alias="trainingArguments")
    __properties = ["samples", "trainingArguments"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TrainModelRequestBody:
        """Create an instance of TrainModelRequestBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of training_arguments
        if self.training_arguments:
            _dict['trainingArguments'] = self.training_arguments.to_dict()
        # set to None if samples (nullable) is None
        # and __fields_set__ contains the field
        if self.samples is None and "samples" in self.__fields_set__:
            _dict['samples'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TrainModelRequestBody:
        """Create an instance of TrainModelRequestBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TrainModelRequestBody.parse_obj(obj)

        _obj = TrainModelRequestBody.parse_obj({
            "samples": obj.get("samples"),
            "training_arguments": TrainModelRequestBodyTrainingArguments.from_dict(obj.get("trainingArguments")) if obj.get("trainingArguments") is not None else None
        })
        return _obj

