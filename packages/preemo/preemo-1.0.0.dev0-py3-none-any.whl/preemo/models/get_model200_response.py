# coding: utf-8

"""
    Model API

    Model API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field, validator

class GetModel200Response(BaseModel):
    """
    GetModel200Response
    """
    name: Optional[Any] = Field(...)
    slug: Optional[Any] = Field(...)
    base_model_id: Optional[Any] = Field(..., alias="baseModelId")
    id: Optional[Any] = Field(...)
    is_base_model: Optional[Any] = Field(..., alias="isBaseModel")
    __properties = ["name", "slug", "baseModelId", "id", "isBaseModel"]

    @validator('is_base_model')
    def is_base_model_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('false'):
            raise ValueError("must be one of enum values ('false')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetModel200Response:
        """Create an instance of GetModel200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if slug (nullable) is None
        # and __fields_set__ contains the field
        if self.slug is None and "slug" in self.__fields_set__:
            _dict['slug'] = None

        # set to None if base_model_id (nullable) is None
        # and __fields_set__ contains the field
        if self.base_model_id is None and "base_model_id" in self.__fields_set__:
            _dict['baseModelId'] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if is_base_model (nullable) is None
        # and __fields_set__ contains the field
        if self.is_base_model is None and "is_base_model" in self.__fields_set__:
            _dict['isBaseModel'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetModel200Response:
        """Create an instance of GetModel200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetModel200Response.parse_obj(obj)

        _obj = GetModel200Response.parse_obj({
            "name": obj.get("name"),
            "slug": obj.get("slug"),
            "base_model_id": obj.get("baseModelId"),
            "id": obj.get("id"),
            "is_base_model": obj.get("isBaseModel")
        })
        return _obj

