# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['poetry_release']

package_data = \
{'': ['*']}

install_requires = \
['poetry>=1.2.0,<2.0.0']

entry_points = \
{'poetry.application.plugin': ['poetry-release = '
                               'poetry_release.plugin:ReleasePlugin']}

setup_kwargs = {
    'name': 'poetry-release',
    'version': '0.3.1',
    'description': 'Plugin for release management in projects based on Poetry',
    'long_description': 'Poetry release\n==============\n\n|CI| |PyPi Package|\n\n.. |CI| image:: https://github.com/topenkoff/poetry-release/actions/workflows/ci.yml/badge.svg\n   :target: https://github.com/topenkoff/poetry-release/actions?query=workflow\n.. |PyPi Package| image:: https://img.shields.io/pypi/v/poetry-release?color=%2334D058&label=pypi%20package\n   :target: https://pypi.org/project/poetry-release/\n\nRelease managment plugin for\n`poetry <https://github.com/python-poetry/poetry>`__\n\n*The project is currently under development and is not ready for use in\nproduction.*\n\nInspired by `cargo-release <https://github.com/sunng87/cargo-release>`__\n\nFeatures\n--------\n\n-  `Semver <https://semver.org/>`__ support\n-  Creating git tag and commits after release\n-  `Changelog <https://keepachangelog.com/en/1.0.0/>`__ support\n\nInstallation\n------------\n\n**Note:** Plugins work at Poetry with version 1.2.0 or above.\n\nYou can install plugin via ``poetry``\n\n.. code-block:: bash\n\n    poetry self add poetry-release\n\nor via ``pipx inject``\n\n.. code-block:: bash\n\n    pipx inject poetry poetry-release\n\nUsage\n-----\n\n.. code-block:: bash\n\n    poetry release <level>\n\nExisting levels\n\n-  major\n-  minor\n-  patch\n-  release (default)\n-  rc\n-  beta\n-  alpha\n\nPrerequisite\n~~~~~~~~~~~~\n\nYour project should be managed by git.\n\nConfig\n------\n\nReplacements\n~~~~~~~~~~~~\n\nPoetry-release supports two types of release replacements:\n\n#. | By Regex\n   | You can create replacements in files using regular expressions:\n\n   .. code-block:: toml\n\n       release-replacements = [\n           { file="CHANGELOG.md", pattern="\\\\[Unreleased\\\\]", replace="[{version}] - {date}" },\n       ]\n\n#. Message replacements\n\n+---------------------------------+--------------------------------------------------+\n| Replacement                     | Description                                      |\n+=================================+==================================================+\n| ``release-commit-message``      | Message for release commit                       |\n+---------------------------------+--------------------------------------------------+\n| ``post-release-commit-message`` | Message for post release commit(if it\'s allowed) |\n+---------------------------------+--------------------------------------------------+\n| ``tag-name``                    | The name of tag                                  |\n+---------------------------------+--------------------------------------------------+\n| ``tag-message``                 | The message for tag                              |\n+---------------------------------+--------------------------------------------------+\n\n\nTemplates\n~~~~~~~~~\nPoetry-release supports templates to build releases. Templates could\nbe used in release replacements/messages/tags. Template is indicated\nlike ``some text {package_name}``\n\n+------------------+-------------------------------------------------------+\n| Template         | Description                                           |\n+==================+=======================================================+\n| ``package_name`` | The name of this project in `pyproject.toml`          |\n+------------------+-------------------------------------------------------+\n| ``prev_version`` | The project version before release                    |\n+------------------+-------------------------------------------------------+\n| ``version``      | The bumped project version                            |\n+------------------+-------------------------------------------------------+\n| ``next_version`` | The version for next development iteration (alpha)    |\n+------------------+-------------------------------------------------------+\n| ``date``         | The current date in ``%Y-%m-%d``` format              |\n+------------------+-------------------------------------------------------+\n\n\nRelease settings\n~~~~~~~~~~~~~~~~\n\nThese settings allow you to disable part of the functionality. They\ncan be set either in ``pyproject.toml`` or in CLI like flag. Settings\nfrom CLI have a higher priority\n\n+------------------+---------+-----+--------------------+---------------------------------+\n| Settings         | Default | CLI | ``pyproject.toml`` | Description                     |\n+==================+=========+=====+====================+=================================+\n| ``disable-push`` | false   | yes | yes                | Don\'t do git push               |\n+------------------+---------+-----+--------------------+---------------------------------+\n| ``disable-tag``  | false   | yes | yes                | Don\'t do git tag                |\n+------------------+---------+-----+--------------------+---------------------------------+\n| ``disable-dev``  | false   | yes | yes                | Skip bump version after release |\n+------------------+---------+-----+--------------------+---------------------------------+\n| ``sign-commit``  | false   | no  | yes                | Signed commit                   |\n+------------------+---------+-----+--------------------+---------------------------------+\n| ``sign-tag``     | false   | no  | yes                | Signed tag                      |\n+------------------+---------+-----+--------------------+---------------------------------+\n| ``dry-run``      | false   | yes | no                 | Dry run release                 |\n+------------------+---------+-----+--------------------+---------------------------------+\n\n\nDefault git messages\n^^^^^^^^^^^^^^^^^^^^\n\n-  Tag name - ``{version}``\n-  Tag message - ``Released {package_name} {version}``\n-  Release commit - ``Released {package_name} {version}``\n-  Post release commit - ``Starting {package_name}\'s next development iteration {next_version}``\n\nExample\n~~~~~~~\n\n.. code-block:: toml\n\n    [tool.poetry-release]\n    release-replacements = [\n        { file="CHANGELOG.md", pattern="\\\\[Unreleased\\\\]", replace="[{version}] - {date}" },\n        { file="CHANGELOG.md", pattern="\\\\(https://semver.org/spec/v2.0.0.html\\\\).", replace="(https://semver.org/spec/v20.0.html).\\n\\n## [Unreleased]"},\n    ]\n    disable-push = false\n    disable-tag = false\n    disable-dev = false\n    release-commit-message = "Release {package_name} {version}"\n    post-release-commit-message = "Start next development iteration {next_version}"\n    tag-name = "{version}"\n    sign-tag = true\n    sign-commit = true\n\n.. code-block:: bash\n\n    poetry release minor --disable-dev --disable-tag\n',
    'author': 'Denis Kayshev',
    'author_email': 'topenkoff@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/topenkoff/poetry-release',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
