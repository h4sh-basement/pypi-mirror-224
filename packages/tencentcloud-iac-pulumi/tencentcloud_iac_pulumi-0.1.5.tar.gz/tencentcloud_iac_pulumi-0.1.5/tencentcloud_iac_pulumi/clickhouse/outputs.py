# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'InstanceCommonSpec',
    'InstanceDataSpec',
]

@pulumi.output_type
class InstanceCommonSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "specName":
            suggest = "spec_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceCommonSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceCommonSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceCommonSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: int,
                 disk_size: int,
                 spec_name: str):
        """
        :param int count: Node count. NOTE: Only support value 3.
        :param int disk_size: Disk size.
        :param str spec_name: Spec name.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "spec_name", spec_name)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        Node count. NOTE: Only support value 3.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        Disk size.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="specName")
    def spec_name(self) -> str:
        """
        Spec name.
        """
        return pulumi.get(self, "spec_name")


@pulumi.output_type
class InstanceDataSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "specName":
            suggest = "spec_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceDataSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceDataSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceDataSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: int,
                 disk_size: int,
                 spec_name: str):
        """
        :param int count: Data spec count.
        :param int disk_size: Disk size.
        :param str spec_name: Spec name.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "spec_name", spec_name)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        Data spec count.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        Disk size.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="specName")
    def spec_name(self) -> str:
        """
        Spec name.
        """
        return pulumi.get(self, "spec_name")


