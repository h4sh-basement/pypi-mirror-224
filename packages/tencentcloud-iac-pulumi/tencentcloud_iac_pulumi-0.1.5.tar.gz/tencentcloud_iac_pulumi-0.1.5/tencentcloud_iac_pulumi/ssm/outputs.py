# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ProductSecretPrivilegesList',
    'GetSecretVersionsSecretVersionListResult',
    'GetSecretsSecretListResult',
]

@pulumi.output_type
class ProductSecretPrivilegesList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privilegeName":
            suggest = "privilege_name"
        elif key == "columnName":
            suggest = "column_name"
        elif key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProductSecretPrivilegesList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProductSecretPrivilegesList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProductSecretPrivilegesList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 privilege_name: str,
                 privileges: Sequence[str],
                 column_name: Optional[str] = None,
                 database: Optional[str] = None,
                 table_name: Optional[str] = None):
        """
        :param str privilege_name: Permission name. Valid values: `GlobalPrivileges`, `DatabasePrivileges`, `TablePrivileges`, `ColumnPrivileges`. When the permission is `DatabasePrivileges`, the database name must be specified by the `Database` parameter; When the permission is `TablePrivileges`, the database name and the table name in the database must be specified by the `Database` and `TableName` parameters; When the permission is `ColumnPrivileges`, the database name, table name in the database, and column name in the table must be specified by the `Database`, `TableName`, and `ColumnName` parameters.
        :param Sequence[str] privileges: Permission list. For the `Mysql` service, optional permission values are: 1. Valid values of `GlobalPrivileges`: SELECT,INSERT,UPDATE,DELETE,CREATE, PROCESS, DROP,REFERENCES,INDEX,ALTER,SHOW DATABASES,CREATE TEMPORARY TABLES,LOCK TABLES,EXECUTE,CREATE VIEW,SHOW VIEW,CREATE ROUTINE,ALTER ROUTINE,EVENT,TRIGGER. Note: if this parameter is not passed in, it means to clear the permission. 2. Valid values of `DatabasePrivileges`: SELECT,INSERT,UPDATE,DELETE,CREATE, DROP,REFERENCES,INDEX,ALTER,CREATE TEMPORARY TABLES,LOCK TABLES,EXECUTE,CREATE VIEW,SHOW VIEW,CREATE ROUTINE,ALTER ROUTINE,EVENT,TRIGGER. Note: if this parameter is not passed in, it means to clear the permission. 3. Valid values of `TablePrivileges`: SELECT,INSERT,UPDATE,DELETE,CREATE, DROP,REFERENCES,INDEX,ALTER,CREATE VIEW,SHOW VIEW, TRIGGER. Note: if this parameter is not passed in, it means to clear the permission. 4. Valid values of `ColumnPrivileges`: SELECT,INSERT,UPDATE,REFERENCES.Note: if this parameter is not passed in, it means to clear the permission.
        :param str column_name: This value takes effect only when `PrivilegeName` is `ColumnPrivileges`, and the following parameters are required in this case:Database: explicitly indicate the database instance.TableName: explicitly indicate the table.
        :param str database: This value takes effect only when `PrivilegeName` is `DatabasePrivileges`.
        :param str table_name: This value takes effect only when `PrivilegeName` is `TablePrivileges`, and the `Database` parameter is required in this case to explicitly indicate the database instance.
        """
        pulumi.set(__self__, "privilege_name", privilege_name)
        pulumi.set(__self__, "privileges", privileges)
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="privilegeName")
    def privilege_name(self) -> str:
        """
        Permission name. Valid values: `GlobalPrivileges`, `DatabasePrivileges`, `TablePrivileges`, `ColumnPrivileges`. When the permission is `DatabasePrivileges`, the database name must be specified by the `Database` parameter; When the permission is `TablePrivileges`, the database name and the table name in the database must be specified by the `Database` and `TableName` parameters; When the permission is `ColumnPrivileges`, the database name, table name in the database, and column name in the table must be specified by the `Database`, `TableName`, and `ColumnName` parameters.
        """
        return pulumi.get(self, "privilege_name")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        """
        Permission list. For the `Mysql` service, optional permission values are: 1. Valid values of `GlobalPrivileges`: SELECT,INSERT,UPDATE,DELETE,CREATE, PROCESS, DROP,REFERENCES,INDEX,ALTER,SHOW DATABASES,CREATE TEMPORARY TABLES,LOCK TABLES,EXECUTE,CREATE VIEW,SHOW VIEW,CREATE ROUTINE,ALTER ROUTINE,EVENT,TRIGGER. Note: if this parameter is not passed in, it means to clear the permission. 2. Valid values of `DatabasePrivileges`: SELECT,INSERT,UPDATE,DELETE,CREATE, DROP,REFERENCES,INDEX,ALTER,CREATE TEMPORARY TABLES,LOCK TABLES,EXECUTE,CREATE VIEW,SHOW VIEW,CREATE ROUTINE,ALTER ROUTINE,EVENT,TRIGGER. Note: if this parameter is not passed in, it means to clear the permission. 3. Valid values of `TablePrivileges`: SELECT,INSERT,UPDATE,DELETE,CREATE, DROP,REFERENCES,INDEX,ALTER,CREATE VIEW,SHOW VIEW, TRIGGER. Note: if this parameter is not passed in, it means to clear the permission. 4. Valid values of `ColumnPrivileges`: SELECT,INSERT,UPDATE,REFERENCES.Note: if this parameter is not passed in, it means to clear the permission.
        """
        return pulumi.get(self, "privileges")

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        """
        This value takes effect only when `PrivilegeName` is `ColumnPrivileges`, and the following parameters are required in this case:Database: explicitly indicate the database instance.TableName: explicitly indicate the table.
        """
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        This value takes effect only when `PrivilegeName` is `DatabasePrivileges`.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        """
        This value takes effect only when `PrivilegeName` is `TablePrivileges`, and the `Database` parameter is required in this case to explicitly indicate the database instance.
        """
        return pulumi.get(self, "table_name")


@pulumi.output_type
class GetSecretVersionsSecretVersionListResult(dict):
    def __init__(__self__, *,
                 secret_binary: str,
                 secret_string: str,
                 version_id: str):
        """
        :param str secret_binary: The base64-encoded binary secret.
        :param str secret_string: The string text of secret.
        :param str version_id: VersionId used to filter result.
        """
        pulumi.set(__self__, "secret_binary", secret_binary)
        pulumi.set(__self__, "secret_string", secret_string)
        pulumi.set(__self__, "version_id", version_id)

    @property
    @pulumi.getter(name="secretBinary")
    def secret_binary(self) -> str:
        """
        The base64-encoded binary secret.
        """
        return pulumi.get(self, "secret_binary")

    @property
    @pulumi.getter(name="secretString")
    def secret_string(self) -> str:
        """
        The string text of secret.
        """
        return pulumi.get(self, "secret_string")

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> str:
        """
        VersionId used to filter result.
        """
        return pulumi.get(self, "version_id")


@pulumi.output_type
class GetSecretsSecretListResult(dict):
    def __init__(__self__, *,
                 create_time: int,
                 create_uin: int,
                 delete_time: int,
                 description: str,
                 kms_key_id: str,
                 secret_name: str,
                 status: str):
        """
        :param int create_time: Create time of secret.
        :param int create_uin: Uin of Creator.
        :param int delete_time: Delete time of CMK.
        :param str description: Description of secret.
        :param str kms_key_id: KMS keyId used to encrypt secret.
        :param str secret_name: Secret name used to filter result.
        :param str status: Status of secret.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "create_uin", create_uin)
        pulumi.set(__self__, "delete_time", delete_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "kms_key_id", kms_key_id)
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        """
        Create time of secret.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="createUin")
    def create_uin(self) -> int:
        """
        Uin of Creator.
        """
        return pulumi.get(self, "create_uin")

    @property
    @pulumi.getter(name="deleteTime")
    def delete_time(self) -> int:
        """
        Delete time of CMK.
        """
        return pulumi.get(self, "delete_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of secret.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> str:
        """
        KMS keyId used to encrypt secret.
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        Secret name used to filter result.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of secret.
        """
        return pulumi.get(self, "status")


