import threading
from typing import List

class DmObject:
    def __init__(self) -> None: ...
    @classmethod
    def set_dll_path(cls, dm_reg_dll, dm_dll) -> None: ...
    def ex_reg(self): ...
    def create(self): ...
    def ver(self) -> str: ...
    def reg(self, code, ver_info) -> int: ...
    def set_show_error_msg(self, show) -> int: ...
    def set_path(self, path) -> int: ...
    def is_bind(self, hwnd) -> int: ...
    def set_dict(self, index, file) -> int: ...
    def enum_window(self, parent, title, class_name, fil) -> str: ...
    def get_window(self, hwnd, flag) -> int: ...
    def move_windows(self, hwnd, x, y) -> int: ...
    def bind_window(self, hwnd, display, mouse, keypad, mode) -> int: ...
    def bind_window_ex(self, hwnd, display, mouse, keypad, public, mode) -> int: ...
    def dm_guard(self, enable, g_type) -> int: ...
    def set_windows_state(self, hwnd, flag) -> int: ...
    def un_bind_window(self) -> int: ...
    def fetch_word(self, x1, y1, x2, y2, color, word) -> str: ...
    def is_display_dead(self, x1, y1, x2, y2, t) -> int: ...
    def find_pic(self, x1, y1, x2, y2, pic_name, delta_color: str = ..., sim: float = ..., dirt: int = ...) -> str: ...
    def cmp_color(self, x, y, color, sim) -> int: ...
    def find_color(self, x1, y1, x2, y2, color, sim: float = ..., dirt: int = ...) -> int: ...
    def find_multi_color(self, x1, y1, x2, y2, first_color, offset_color, sim: float = ..., dirt: int = ...) -> int: ...
    def key_press(self, vk_code) -> int: ...
    def move_to(self, x, y) -> int: ...
    def left_click(self) -> int: ...
    def right_click(self) -> int: ...
    def left_down(self) -> int: ...
    def left_up(self) -> int: ...
    def send_string(self, hwnd, content) -> int: ...
    def send_string2(self, hwnd, content) -> int: ...
    def find_str_fast_e(self, x1, y1, x2, y2, string, color_format, sim: float = ...) -> list: ...
    def ocr(self, x1, y1, x2, y2, color_format, sim: float = ...) -> str: ...
    def __getattr__(self, name, *args, **kwargs): ...

class DataStruct:
    dm: DmObject
    thread: str
    hwnd: str
    def __init__(self) -> None: ...
    def clear(self) -> None: ...

gl_data: DataStruct
td_data: List[DataStruct]

class Thread(threading.Thread):
    handle: str
    daemon: bool
    def __init__(self, target: callable, *args, **kwargs) -> None: ...
    def run(self) -> None: ...
    def stop(self) -> None: ...
    def pause(self): ...
    def resume(self): ...
