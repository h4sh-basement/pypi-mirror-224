import{SimpleNotification}from"../../../common/notify.mjs";import{isEmpty}from"../../../base/helpers.mjs";import{ImageView}from"../../image.mjs";import{ToolbarView}from"../../menu.mjs";import{ImageAdjustmentView,ImageFilterView}from"./filter.mjs";class InvocationToolbarView extends ToolbarView{constructor(i){super(i.config),this.invocationNode=i}async onMouseEnter(i){this.invocationNode.toolbarEntered()}async onMouseLeave(i){this.invocationNode.toolbarLeft()}async build(){let i=await super.build();return i.on("mouseenter",(i=>this.onMouseEnter(i))),i.on("mouseleave",(i=>this.onMouseLeave(i))),i}}class CurrentInvocationImageView extends ImageView{constructor(i){super(i.config),this.editor=i}static className="current-invocation-image-view";static hideTime=250;static imageAdjustmentWindowWidth=750;static imageAdjustmentWindowHeight=525;static imageFilterWindowWidth=450;static imageFilterWindowHeight=350;async getTools(){return isEmpty(this.toolbar)&&(this.toolbar=new InvocationToolbarView(this),this.hideImage=await this.toolbar.addItem("Hide Image","fa-solid fa-eye-slash"),this.hideImage.onClick((()=>this.editor.application.images.hideCurrentInvocation())),navigator.clipboard&&"function"==typeof ClipboardItem&&(this.copyImage=await this.toolbar.addItem("Copy to Clipboard","fa-solid fa-clipboard"),this.copyImage.onClick((()=>this.copyToClipboard()))),this.popoutImage=await this.toolbar.addItem("Popout Image","fa-solid fa-arrow-up-right-from-square"),this.popoutImage.onClick((()=>this.sendToWindow())),this.saveImage=await this.toolbar.addItem("Save As","fa-solid fa-floppy-disk"),this.saveImage.onClick((()=>this.saveToDisk())),this.adjustImage=await this.toolbar.addItem("Adjust Image","fa-solid fa-sliders"),this.adjustImage.onClick((()=>this.startImageAdjustment())),this.filterImage=await this.toolbar.addItem("Filter Image","fa-solid fa-wand-magic-sparkles"),this.filterImage.onClick((()=>this.startImageFilter())),this.editImage=await this.toolbar.addItem("Edit Image","fa-solid fa-pen-to-square"),this.editImage.onClick((()=>this.sendToCanvas()))),this.toolbar}setImage(i){super.setImage(i),isEmpty(this.imageAdjuster)||this.imageAdjuster.setImage(i)}async copyToClipboard(){navigator.clipboard.write([new ClipboardItem({"image/png":await this.getBlob()})]),SimpleNotification.notify("Copied to clipboard!",2e3)}async saveToDisk(){this.editor.application.saveBlobAs("Save Image",await this.getBlob(),".png")}async sendToCanvas(){this.editor.application.initializeStateFromImage(await this.getImageAsDataURL())}async startImageFilter(){if(!isEmpty(this.imageFilterWindow))return void this.imageFilterWindow.focus();if(!isEmpty(this.imageAdjustmentWindow))return void this.editor.application.notifications.push("warning","Complete image adjustments before trying to filter.");this.imageFilterView=new ImageFilterView(this.config,this.src,this.node.element.parentElement),this.imageFilterWindow=await this.editor.application.windows.spawnWindow("Filter Image",this.imageFilterView,this.constructor.imageFilterWindowWidth,this.constructor.imageFilterWindowHeight);let i=()=>{try{this.imageFilterView.removeCanvas()}catch(i){}this.imageFilterView=null,this.imageFilterWindow=null};this.imageFilterWindow.onClose(i),this.imageFilterView.onSave((async()=>{this.setImage(this.imageFilterView.getImageSource()),setTimeout((()=>{this.imageFilterWindow.remove(),i()}),150)})),this.imageFilterView.onCancel((()=>{this.imageFilterWindow.remove(),i()}))}async startImageAdjustment(){if(!isEmpty(this.imageAdjustmentWindow))return void this.imageAdjustmentWindow.focus();if(!isEmpty(this.imageFilterWindow))return void this.editor.application.notifications.push("warning","Complete image filters before trying to adjust.");this.imageAdjustmentView=new ImageAdjustmentView(this.config,this.src,this.node.element.parentElement),this.imageAdjustmentWindow=await this.editor.application.windows.spawnWindow("Adjust Image",this.imageAdjustmentView,this.constructor.imageAdjustmentWindowWidth,this.constructor.imageAdjustmentWindowHeight);let i=()=>{try{this.imageAdjustmentView.removeCanvas()}catch(i){}this.imageAdjustmentView=null,this.imageAdjustmentWindow=null};this.imageAdjustmentWindow.onClose(i),this.imageAdjustmentView.onSave((async()=>{this.setImage(this.imageAdjustmentView.getImageSource()),setTimeout((()=>{this.imageAdjustmentWindow.remove(),i()}),150)})),this.imageAdjustmentView.onCancel((()=>{this.imageAdjustmentWindow.remove(),i()}))}async sendToWindow(){window.open(this.src)}async toolbarEntered(){this.stopHideTimer()}async toolbarLeft(){this.startHideTimer()}stopHideTimer(){clearTimeout(this.timer)}startHideTimer(){this.timer=setTimeout((async()=>{let i=await this.lock.acquire(),t=await this.getTools();this.node.element.parentElement.removeChild(await t.render()),i()}),this.constructor.hideTime)}async onMouseEnter(i){this.stopHideTimer();let t=await this.lock.acquire(),e=await this.getTools();this.node.element.parentElement.appendChild(await e.render()),t()}async onMouseLeave(i){this.startHideTimer()}async build(){let i=await super.build();return i.on("mouseenter",(i=>this.onMouseEnter(i))),i.on("mouseleave",(i=>this.onMouseLeave(i))),i}}export{InvocationToolbarView,CurrentInvocationImageView};
