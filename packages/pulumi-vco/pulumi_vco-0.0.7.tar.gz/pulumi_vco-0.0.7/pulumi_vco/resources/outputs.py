# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BackEndState',
    'CpuTopology',
    'Endpoint',
    'FirewallCustom',
    'FrontEnd',
    'HealthCheck',
    'IOTune',
    'LetsEncrypt',
    'NetworkInterface',
    'Options',
    'OsAccount',
    'ResourceLimits',
    'ReverseProxyBackend',
    'ReverseProxyFrontEnd',
    'ServerPoolHost',
    'StickySessionCookie',
    'TLS',
    'VmDisk',
]

@pulumi.output_type
class BackEndState(dict):
    def __init__(__self__, *,
                 serverpool_id: str,
                 serverpool_name: str,
                 target_port: int):
        pulumi.set(__self__, "serverpool_id", serverpool_id)
        pulumi.set(__self__, "serverpool_name", serverpool_name)
        pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def serverpool_id(self) -> str:
        return pulumi.get(self, "serverpool_id")

    @property
    @pulumi.getter
    def serverpool_name(self) -> str:
        return pulumi.get(self, "serverpool_name")

    @property
    @pulumi.getter
    def target_port(self) -> int:
        return pulumi.get(self, "target_port")


@pulumi.output_type
class CpuTopology(dict):
    def __init__(__self__, *,
                 cores: int,
                 sockets: int,
                 threads: int):
        pulumi.set(__self__, "cores", cores)
        pulumi.set(__self__, "sockets", sockets)
        pulumi.set(__self__, "threads", threads)

    @property
    @pulumi.getter
    def cores(self) -> int:
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter
    def sockets(self) -> int:
        return pulumi.get(self, "sockets")

    @property
    @pulumi.getter
    def threads(self) -> int:
        return pulumi.get(self, "threads")


@pulumi.output_type
class Endpoint(dict):
    def __init__(__self__, *,
                 address: str,
                 name: str,
                 port: int,
                 private_address: str,
                 private_port: int,
                 psk: str,
                 user: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "private_address", private_address)
        pulumi.set(__self__, "private_port", private_port)
        pulumi.set(__self__, "psk", psk)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def private_address(self) -> str:
        return pulumi.get(self, "private_address")

    @property
    @pulumi.getter
    def private_port(self) -> int:
        return pulumi.get(self, "private_port")

    @property
    @pulumi.getter
    def psk(self) -> str:
        return pulumi.get(self, "psk")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")


@pulumi.output_type
class FirewallCustom(dict):
    def __init__(__self__, *,
                 cdrom_id: int,
                 disk_size: int,
                 image_id: int,
                 memory: int,
                 type: str,
                 vcpus: int):
        pulumi.set(__self__, "cdrom_id", cdrom_id)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vcpus", vcpus)

    @property
    @pulumi.getter
    def cdrom_id(self) -> int:
        return pulumi.get(self, "cdrom_id")

    @property
    @pulumi.getter
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter
    def image_id(self) -> int:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vcpus(self) -> int:
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class FrontEnd(dict):
    def __init__(__self__, *,
                 ip_address: str,
                 port: int,
                 tls: 'outputs.TLS'):
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def tls(self) -> 'outputs.TLS':
        return pulumi.get(self, "tls")


@pulumi.output_type
class HealthCheck(dict):
    def __init__(__self__, *,
                 interval: int,
                 path: str,
                 port: int,
                 scheme: str,
                 timeout: int):
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)
        pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def interval(self) -> int:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def scheme(self) -> str:
        return pulumi.get(self, "scheme")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class IOTune(dict):
    def __init__(__self__, *,
                 iops: float):
        pulumi.set(__self__, "iops", iops)

    @property
    @pulumi.getter
    def iops(self) -> float:
        return pulumi.get(self, "iops")


@pulumi.output_type
class LetsEncrypt(dict):
    def __init__(__self__, *,
                 email: str,
                 enabled: bool):
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NetworkInterface(dict):
    def __init__(__self__, *,
                 device_name: str,
                 external_cloudspace_id: str,
                 ip_address: str,
                 mac_address: str,
                 model: str,
                 network_id: int,
                 nic_type: str):
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "external_cloudspace_id", external_cloudspace_id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "nic_type", nic_type)

    @property
    @pulumi.getter
    def device_name(self) -> str:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter
    def external_cloudspace_id(self) -> str:
        return pulumi.get(self, "external_cloudspace_id")

    @property
    @pulumi.getter
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def mac_address(self) -> str:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def model(self) -> str:
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def network_id(self) -> int:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def nic_type(self) -> str:
        return pulumi.get(self, "nic_type")


@pulumi.output_type
class Options(dict):
    def __init__(__self__, *,
                 health_check: 'outputs.HealthCheck',
                 sticky_session_cookie: 'outputs.StickySessionCookie'):
        pulumi.set(__self__, "health_check", health_check)
        pulumi.set(__self__, "sticky_session_cookie", sticky_session_cookie)

    @property
    @pulumi.getter
    def health_check(self) -> 'outputs.HealthCheck':
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter
    def sticky_session_cookie(self) -> 'outputs.StickySessionCookie':
        return pulumi.get(self, "sticky_session_cookie")


@pulumi.output_type
class OsAccount(dict):
    def __init__(__self__, *,
                 login: str,
                 password: str):
        pulumi.set(__self__, "login", login)
        pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter
    def login(self) -> str:
        return pulumi.get(self, "login")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")


@pulumi.output_type
class ResourceLimits(dict):
    def __init__(__self__, *,
                 external_network_quota: float,
                 memory_quota: float,
                 public_ip_quota: float,
                 vcpu_quota: float,
                 vdisk_space_quota: float):
        pulumi.set(__self__, "external_network_quota", external_network_quota)
        pulumi.set(__self__, "memory_quota", memory_quota)
        pulumi.set(__self__, "public_ip_quota", public_ip_quota)
        pulumi.set(__self__, "vcpu_quota", vcpu_quota)
        pulumi.set(__self__, "vdisk_space_quota", vdisk_space_quota)

    @property
    @pulumi.getter
    def external_network_quota(self) -> float:
        return pulumi.get(self, "external_network_quota")

    @property
    @pulumi.getter
    def memory_quota(self) -> float:
        return pulumi.get(self, "memory_quota")

    @property
    @pulumi.getter
    def public_ip_quota(self) -> float:
        return pulumi.get(self, "public_ip_quota")

    @property
    @pulumi.getter
    def vcpu_quota(self) -> float:
        return pulumi.get(self, "vcpu_quota")

    @property
    @pulumi.getter
    def vdisk_space_quota(self) -> float:
        return pulumi.get(self, "vdisk_space_quota")


@pulumi.output_type
class ReverseProxyBackend(dict):
    def __init__(__self__, *,
                 options: 'outputs.Options',
                 scheme: str,
                 serverpool_id: str,
                 target_port: int):
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "scheme", scheme)
        pulumi.set(__self__, "serverpool_id", serverpool_id)
        pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def options(self) -> 'outputs.Options':
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def scheme(self) -> str:
        return pulumi.get(self, "scheme")

    @property
    @pulumi.getter
    def serverpool_id(self) -> str:
        return pulumi.get(self, "serverpool_id")

    @property
    @pulumi.getter
    def target_port(self) -> int:
        return pulumi.get(self, "target_port")


@pulumi.output_type
class ReverseProxyFrontEnd(dict):
    def __init__(__self__, *,
                 domain: str,
                 http_port: int,
                 https_port: int,
                 ip_address: str,
                 letsencrypt: 'outputs.LetsEncrypt',
                 scheme: str):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "http_port", http_port)
        pulumi.set(__self__, "https_port", https_port)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "letsencrypt", letsencrypt)
        pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def http_port(self) -> int:
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter
    def https_port(self) -> int:
        return pulumi.get(self, "https_port")

    @property
    @pulumi.getter
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def letsencrypt(self) -> 'outputs.LetsEncrypt':
        return pulumi.get(self, "letsencrypt")

    @property
    @pulumi.getter
    def scheme(self) -> str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class ServerPoolHost(dict):
    def __init__(__self__, *,
                 address: str,
                 host_id: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "host_id", host_id)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def host_id(self) -> str:
        return pulumi.get(self, "host_id")


@pulumi.output_type
class StickySessionCookie(dict):
    def __init__(__self__, *,
                 http_only: bool,
                 name: str,
                 same_site: str,
                 secure: bool):
        pulumi.set(__self__, "http_only", http_only)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "same_site", same_site)
        pulumi.set(__self__, "secure", secure)

    @property
    @pulumi.getter
    def http_only(self) -> bool:
        return pulumi.get(self, "http_only")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def same_site(self) -> str:
        return pulumi.get(self, "same_site")

    @property
    @pulumi.getter
    def secure(self) -> bool:
        return pulumi.get(self, "secure")


@pulumi.output_type
class TLS(dict):
    def __init__(__self__, *,
                 domain: str,
                 is_enabled: bool,
                 tls_termination: bool):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "tls_termination", tls_termination)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def tls_termination(self) -> bool:
        return pulumi.get(self, "tls_termination")


@pulumi.output_type
class VmDisk(dict):
    def __init__(__self__, *,
                 description: str,
                 disk_id: int,
                 disk_name: str,
                 disk_size: int,
                 disk_type: str,
                 exposed: bool,
                 order: str,
                 pci_bus: int,
                 pci_slot: int,
                 status: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "disk_name", disk_name)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "exposed", exposed)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "pci_bus", pci_bus)
        pulumi.set(__self__, "pci_slot", pci_slot)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def disk_id(self) -> int:
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter
    def disk_name(self) -> str:
        return pulumi.get(self, "disk_name")

    @property
    @pulumi.getter
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter
    def disk_type(self) -> str:
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def exposed(self) -> bool:
        return pulumi.get(self, "exposed")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def pci_bus(self) -> int:
        return pulumi.get(self, "pci_bus")

    @property
    @pulumi.getter
    def pci_slot(self) -> int:
        return pulumi.get(self, "pci_slot")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


