# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CloudspaceArgs', 'Cloudspace']

@pulumi.input_type
class CloudspaceArgs:
    def __init__(__self__, *,
                 cdrom_id: Optional[pulumi.Input[int]] = None,
                 customer_id: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 external_network_id: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[int]] = None,
                 local_domain: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 memory_quota: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_cloudspace_id: Optional[pulumi.Input[str]] = None,
                 private: Optional[pulumi.Input[bool]] = None,
                 private_network: Optional[pulumi.Input[str]] = None,
                 public_ip_quota: Optional[pulumi.Input[int]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 vcpu_quota: Optional[pulumi.Input[int]] = None,
                 vcpus: Optional[pulumi.Input[int]] = None,
                 vdisk_space_quota: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Cloudspace resource.
        :param pulumi.Input[int] cdrom_id: CDrom to use a source for a custom firewall.
        :param pulumi.Input[str] customer_id: The name of the customer that will be used.
        :param pulumi.Input[int] disk_size: Disk size to be used for a custom firewall.
        :param pulumi.Input[int] external_network_id: The id of the external network to be used.
        :param pulumi.Input[str] host: Add a host to the resource.
        :param pulumi.Input[int] image_id: Image to use as a custom firewall.
        :param pulumi.Input[str] local_domain: Specify a local domain for the resource.
        :param pulumi.Input[int] memory: Amount of memory to be used for a custom firewall.
        :param pulumi.Input[int] memory_quota: Quota for memory. set -1 for infinite.
        :param pulumi.Input[str] name: The name of the resource.
        :param pulumi.Input[str] parent_cloudspace_id: The cloudspace to connect to in case of a nested cloudspace.
        :param pulumi.Input[bool] private: Specify wether the resource will public or private.
        :param pulumi.Input[str] private_network: Specify a range of ip addresses for the private network of the cloudspace.
        :param pulumi.Input[int] public_ip_quota: Quota for public ip. set -1 for infinite.
        :param pulumi.Input[str] token: The JWT Token for authentication.
        :param pulumi.Input[str] type: OS to be used for a custom firewall.
        :param pulumi.Input[str] url: The Portal URL where the resource needs to be deployed.
        :param pulumi.Input[int] vcpu_quota: Specify wether the resource will public or private.
        :param pulumi.Input[int] vcpus: Amount of vcpu's to be used for a custom firewall.
        :param pulumi.Input[int] vdisk_space_quota: Quota for vdisk space. set -1 for infinite.
        """
        if cdrom_id is not None:
            pulumi.set(__self__, "cdrom_id", cdrom_id)
        if customer_id is not None:
            pulumi.set(__self__, "customer_id", customer_id)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if external_network_id is not None:
            pulumi.set(__self__, "external_network_id", external_network_id)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if local_domain is not None:
            pulumi.set(__self__, "local_domain", local_domain)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if memory_quota is not None:
            pulumi.set(__self__, "memory_quota", memory_quota)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_cloudspace_id is not None:
            pulumi.set(__self__, "parent_cloudspace_id", parent_cloudspace_id)
        if private is not None:
            pulumi.set(__self__, "private", private)
        if private_network is not None:
            pulumi.set(__self__, "private_network", private_network)
        if public_ip_quota is not None:
            pulumi.set(__self__, "public_ip_quota", public_ip_quota)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if vcpu_quota is not None:
            pulumi.set(__self__, "vcpu_quota", vcpu_quota)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)
        if vdisk_space_quota is not None:
            pulumi.set(__self__, "vdisk_space_quota", vdisk_space_quota)

    @property
    @pulumi.getter
    def cdrom_id(self) -> Optional[pulumi.Input[int]]:
        """
        CDrom to use a source for a custom firewall.
        """
        return pulumi.get(self, "cdrom_id")

    @cdrom_id.setter
    def cdrom_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cdrom_id", value)

    @property
    @pulumi.getter(name="customerID")
    def customer_id(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the customer that will be used.
        """
        return pulumi.get(self, "customer_id")

    @customer_id.setter
    def customer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_id", value)

    @property
    @pulumi.getter
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Disk size to be used for a custom firewall.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter
    def external_network_id(self) -> Optional[pulumi.Input[int]]:
        """
        The id of the external network to be used.
        """
        return pulumi.get(self, "external_network_id")

    @external_network_id.setter
    def external_network_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "external_network_id", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Add a host to the resource.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def image_id(self) -> Optional[pulumi.Input[int]]:
        """
        Image to use as a custom firewall.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter
    def local_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a local domain for the resource.
        """
        return pulumi.get(self, "local_domain")

    @local_domain.setter
    def local_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_domain", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[int]]:
        """
        Amount of memory to be used for a custom firewall.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def memory_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Quota for memory. set -1 for infinite.
        """
        return pulumi.get(self, "memory_quota")

    @memory_quota.setter
    def memory_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_quota", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parent_cloudspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        The cloudspace to connect to in case of a nested cloudspace.
        """
        return pulumi.get(self, "parent_cloudspace_id")

    @parent_cloudspace_id.setter
    def parent_cloudspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_cloudspace_id", value)

    @property
    @pulumi.getter
    def private(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify wether the resource will public or private.
        """
        return pulumi.get(self, "private")

    @private.setter
    def private(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private", value)

    @property
    @pulumi.getter
    def private_network(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a range of ip addresses for the private network of the cloudspace.
        """
        return pulumi.get(self, "private_network")

    @private_network.setter
    def private_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_network", value)

    @property
    @pulumi.getter
    def public_ip_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Quota for public ip. set -1 for infinite.
        """
        return pulumi.get(self, "public_ip_quota")

    @public_ip_quota.setter
    def public_ip_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "public_ip_quota", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        The JWT Token for authentication.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        OS to be used for a custom firewall.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The Portal URL where the resource needs to be deployed.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def vcpu_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Specify wether the resource will public or private.
        """
        return pulumi.get(self, "vcpu_quota")

    @vcpu_quota.setter
    def vcpu_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vcpu_quota", value)

    @property
    @pulumi.getter
    def vcpus(self) -> Optional[pulumi.Input[int]]:
        """
        Amount of vcpu's to be used for a custom firewall.
        """
        return pulumi.get(self, "vcpus")

    @vcpus.setter
    def vcpus(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vcpus", value)

    @property
    @pulumi.getter
    def vdisk_space_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Quota for vdisk space. set -1 for infinite.
        """
        return pulumi.get(self, "vdisk_space_quota")

    @vdisk_space_quota.setter
    def vdisk_space_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vdisk_space_quota", value)


class Cloudspace(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cdrom_id: Optional[pulumi.Input[int]] = None,
                 customer_id: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 external_network_id: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[int]] = None,
                 local_domain: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 memory_quota: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_cloudspace_id: Optional[pulumi.Input[str]] = None,
                 private: Optional[pulumi.Input[bool]] = None,
                 private_network: Optional[pulumi.Input[str]] = None,
                 public_ip_quota: Optional[pulumi.Input[int]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 vcpu_quota: Optional[pulumi.Input[int]] = None,
                 vcpus: Optional[pulumi.Input[int]] = None,
                 vdisk_space_quota: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        A Cloudspace is an isolated Virtual Network (Layer 2) where you can deploy cloud resources.
         The user may create three types of cloudspaces:
        Public Cloudspace: The Cloudspace is connected to an external network such as the Internet or your company network.
        Nested Cloudspace: The Cloudspace is connected to another cloudspace in the same location.
        Private Cloudspace: The Cloudspace is isolated with no connections.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] cdrom_id: CDrom to use a source for a custom firewall.
        :param pulumi.Input[str] customer_id: The name of the customer that will be used.
        :param pulumi.Input[int] disk_size: Disk size to be used for a custom firewall.
        :param pulumi.Input[int] external_network_id: The id of the external network to be used.
        :param pulumi.Input[str] host: Add a host to the resource.
        :param pulumi.Input[int] image_id: Image to use as a custom firewall.
        :param pulumi.Input[str] local_domain: Specify a local domain for the resource.
        :param pulumi.Input[int] memory: Amount of memory to be used for a custom firewall.
        :param pulumi.Input[int] memory_quota: Quota for memory. set -1 for infinite.
        :param pulumi.Input[str] name: The name of the resource.
        :param pulumi.Input[str] parent_cloudspace_id: The cloudspace to connect to in case of a nested cloudspace.
        :param pulumi.Input[bool] private: Specify wether the resource will public or private.
        :param pulumi.Input[str] private_network: Specify a range of ip addresses for the private network of the cloudspace.
        :param pulumi.Input[int] public_ip_quota: Quota for public ip. set -1 for infinite.
        :param pulumi.Input[str] token: The JWT Token for authentication.
        :param pulumi.Input[str] type: OS to be used for a custom firewall.
        :param pulumi.Input[str] url: The Portal URL where the resource needs to be deployed.
        :param pulumi.Input[int] vcpu_quota: Specify wether the resource will public or private.
        :param pulumi.Input[int] vcpus: Amount of vcpu's to be used for a custom firewall.
        :param pulumi.Input[int] vdisk_space_quota: Quota for vdisk space. set -1 for infinite.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CloudspaceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A Cloudspace is an isolated Virtual Network (Layer 2) where you can deploy cloud resources.
         The user may create three types of cloudspaces:
        Public Cloudspace: The Cloudspace is connected to an external network such as the Internet or your company network.
        Nested Cloudspace: The Cloudspace is connected to another cloudspace in the same location.
        Private Cloudspace: The Cloudspace is isolated with no connections.

        :param str resource_name: The name of the resource.
        :param CloudspaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CloudspaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cdrom_id: Optional[pulumi.Input[int]] = None,
                 customer_id: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 external_network_id: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[int]] = None,
                 local_domain: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 memory_quota: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_cloudspace_id: Optional[pulumi.Input[str]] = None,
                 private: Optional[pulumi.Input[bool]] = None,
                 private_network: Optional[pulumi.Input[str]] = None,
                 public_ip_quota: Optional[pulumi.Input[int]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 vcpu_quota: Optional[pulumi.Input[int]] = None,
                 vcpus: Optional[pulumi.Input[int]] = None,
                 vdisk_space_quota: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CloudspaceArgs.__new__(CloudspaceArgs)

            __props__.__dict__["cdrom_id"] = cdrom_id
            __props__.__dict__["customer_id"] = customer_id
            __props__.__dict__["disk_size"] = disk_size
            __props__.__dict__["external_network_id"] = external_network_id
            __props__.__dict__["host"] = host
            __props__.__dict__["image_id"] = image_id
            __props__.__dict__["local_domain"] = local_domain
            __props__.__dict__["memory"] = memory
            __props__.__dict__["memory_quota"] = memory_quota
            __props__.__dict__["name"] = name
            __props__.__dict__["parent_cloudspace_id"] = parent_cloudspace_id
            __props__.__dict__["private"] = private
            __props__.__dict__["private_network"] = private_network
            __props__.__dict__["public_ip_quota"] = public_ip_quota
            __props__.__dict__["token"] = token
            __props__.__dict__["type"] = type
            __props__.__dict__["url"] = url
            __props__.__dict__["vcpu_quota"] = vcpu_quota
            __props__.__dict__["vcpus"] = vcpus
            __props__.__dict__["vdisk_space_quota"] = vdisk_space_quota
            __props__.__dict__["cloudspace_mode"] = None
            __props__.__dict__["creation_time"] = None
            __props__.__dict__["external_network_ip"] = None
            __props__.__dict__["router_type"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["update_time"] = None
        super(Cloudspace, __self__).__init__(
            'vco:base:Cloudspace',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Cloudspace':
        """
        Get an existing Cloudspace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CloudspaceArgs.__new__(CloudspaceArgs)

        __props__.__dict__["cloudspace_mode"] = None
        __props__.__dict__["creation_time"] = None
        __props__.__dict__["customer_id"] = None
        __props__.__dict__["external_network_id"] = None
        __props__.__dict__["external_network_ip"] = None
        __props__.__dict__["local_domain"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["private_network"] = None
        __props__.__dict__["router_type"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["token"] = None
        __props__.__dict__["update_time"] = None
        __props__.__dict__["url"] = None
        return Cloudspace(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cloudspace_mode(self) -> pulumi.Output[Optional[str]]:
        """
        mode the cloudspace is in.
        """
        return pulumi.get(self, "cloudspace_mode")

    @property
    @pulumi.getter
    def creation_time(self) -> pulumi.Output[Optional[int]]:
        """
        Timestamp of resource creation.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="customerID")
    def customer_id(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the customer that is used.
        """
        return pulumi.get(self, "customer_id")

    @property
    @pulumi.getter
    def external_network_id(self) -> pulumi.Output[Optional[int]]:
        """
        The id of the external network to be used.
        """
        return pulumi.get(self, "external_network_id")

    @property
    @pulumi.getter
    def external_network_ip(self) -> pulumi.Output[Optional[str]]:
        """
        Default public ip address of the created cloudspace..
        """
        return pulumi.get(self, "external_network_ip")

    @property
    @pulumi.getter
    def local_domain(self) -> pulumi.Output[Optional[str]]:
        """
        Specify a local domain for the resource.
        """
        return pulumi.get(self, "local_domain")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def private_network(self) -> pulumi.Output[Optional[str]]:
        """
        A range of ip addresses for the private network of the cloudspace.
        """
        return pulumi.get(self, "private_network")

    @property
    @pulumi.getter
    def router_type(self) -> pulumi.Output[Optional[str]]:
        """
        Type of router being used.
        """
        return pulumi.get(self, "router_type")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[str]]:
        """
        Status of the deployed resource.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[Optional[str]]:
        """
        The JWT Token for authentication.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def update_time(self) -> pulumi.Output[Optional[int]]:
        """
        Timestamp of last update.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[Optional[str]]:
        """
        The Portal URL where the resource needs to be deployed.
        """
        return pulumi.get(self, "url")

