# Generated from FoostacheLexer.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,44,359,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,
        7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,
        11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,
        17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,
        24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,
        30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,
        37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,
        43,2,44,7,44,1,0,1,0,1,0,1,0,1,0,5,0,101,8,0,10,0,12,0,104,9,0,1,
        0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,
        3,4,3,123,8,3,11,3,12,3,124,1,3,3,3,128,8,3,1,4,1,4,1,4,1,4,1,4,
        1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,4,7,144,8,7,11,7,12,7,145,1,
        7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
        1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
        1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,266,
        8,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,
        1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,
        1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,
        1,34,1,34,1,34,1,35,1,35,3,35,311,8,35,1,35,1,35,5,35,315,8,35,10,
        35,12,35,318,9,35,3,35,320,8,35,1,36,4,36,323,8,36,11,36,12,36,324,
        1,37,1,37,1,38,1,38,1,39,1,39,5,39,333,8,39,10,39,12,39,336,9,39,
        1,40,1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,3,42,352,8,42,1,43,1,43,1,43,1,43,1,44,1,44,1,102,0,45,5,1,
        7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,29,13,31,
        14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,22,49,23,51,24,53,
        25,55,26,57,27,59,28,61,29,63,30,65,31,67,32,69,33,71,34,73,35,75,
        36,77,37,79,38,81,39,83,40,85,41,87,0,89,42,91,43,93,44,5,0,1,2,
        3,4,8,1,0,123,123,3,0,9,10,13,13,32,32,1,0,49,57,1,0,48,57,4,0,48,
        57,65,90,95,95,97,122,2,0,100,100,102,102,3,0,48,57,65,70,97,102,
        8,0,34,34,47,47,92,92,98,98,102,102,110,110,114,114,116,116,368,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,1,13,1,0,0,0,1,
        15,1,0,0,0,2,17,1,0,0,0,2,19,1,0,0,0,2,21,1,0,0,0,2,23,1,0,0,0,2,
        25,1,0,0,0,2,27,1,0,0,0,2,29,1,0,0,0,2,31,1,0,0,0,2,33,1,0,0,0,2,
        35,1,0,0,0,2,37,1,0,0,0,2,39,1,0,0,0,2,41,1,0,0,0,2,43,1,0,0,0,2,
        45,1,0,0,0,2,47,1,0,0,0,2,49,1,0,0,0,2,51,1,0,0,0,2,53,1,0,0,0,2,
        55,1,0,0,0,2,57,1,0,0,0,2,59,1,0,0,0,2,61,1,0,0,0,2,63,1,0,0,0,2,
        65,1,0,0,0,2,67,1,0,0,0,2,69,1,0,0,0,2,71,1,0,0,0,2,73,1,0,0,0,2,
        75,1,0,0,0,2,77,1,0,0,0,3,79,1,0,0,0,3,81,1,0,0,0,3,83,1,0,0,0,3,
        85,1,0,0,0,4,89,1,0,0,0,4,91,1,0,0,0,4,93,1,0,0,0,5,95,1,0,0,0,7,
        110,1,0,0,0,9,116,1,0,0,0,11,127,1,0,0,0,13,129,1,0,0,0,15,135,1,
        0,0,0,17,137,1,0,0,0,19,143,1,0,0,0,21,149,1,0,0,0,23,153,1,0,0,
        0,25,160,1,0,0,0,27,168,1,0,0,0,29,177,1,0,0,0,31,183,1,0,0,0,33,
        191,1,0,0,0,35,196,1,0,0,0,37,204,1,0,0,0,39,212,1,0,0,0,41,216,
        1,0,0,0,43,225,1,0,0,0,45,265,1,0,0,0,47,267,1,0,0,0,49,271,1,0,
        0,0,51,278,1,0,0,0,53,281,1,0,0,0,55,285,1,0,0,0,57,288,1,0,0,0,
        59,290,1,0,0,0,61,292,1,0,0,0,63,294,1,0,0,0,65,296,1,0,0,0,67,298,
        1,0,0,0,69,300,1,0,0,0,71,302,1,0,0,0,73,304,1,0,0,0,75,319,1,0,
        0,0,77,322,1,0,0,0,79,326,1,0,0,0,81,328,1,0,0,0,83,330,1,0,0,0,
        85,337,1,0,0,0,87,341,1,0,0,0,89,343,1,0,0,0,91,353,1,0,0,0,93,357,
        1,0,0,0,95,96,5,123,0,0,96,97,5,123,0,0,97,98,5,33,0,0,98,102,1,
        0,0,0,99,101,9,0,0,0,100,99,1,0,0,0,101,104,1,0,0,0,102,103,1,0,
        0,0,102,100,1,0,0,0,103,105,1,0,0,0,104,102,1,0,0,0,105,106,5,125,
        0,0,106,107,5,125,0,0,107,108,1,0,0,0,108,109,6,0,0,0,109,6,1,0,
        0,0,110,111,5,123,0,0,111,112,5,123,0,0,112,113,5,34,0,0,113,114,
        1,0,0,0,114,115,6,1,1,0,115,8,1,0,0,0,116,117,5,123,0,0,117,118,
        5,123,0,0,118,119,1,0,0,0,119,120,6,2,2,0,120,10,1,0,0,0,121,123,
        8,0,0,0,122,121,1,0,0,0,123,124,1,0,0,0,124,122,1,0,0,0,124,125,
        1,0,0,0,125,128,1,0,0,0,126,128,5,123,0,0,127,122,1,0,0,0,127,126,
        1,0,0,0,128,12,1,0,0,0,129,130,5,34,0,0,130,131,5,125,0,0,131,132,
        5,125,0,0,132,133,1,0,0,0,133,134,6,4,3,0,134,14,1,0,0,0,135,136,
        9,0,0,0,136,16,1,0,0,0,137,138,5,125,0,0,138,139,5,125,0,0,139,140,
        1,0,0,0,140,141,6,6,3,0,141,18,1,0,0,0,142,144,7,1,0,0,143,142,1,
        0,0,0,144,145,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,147,1,
        0,0,0,147,148,6,7,0,0,148,20,1,0,0,0,149,150,5,34,0,0,150,151,1,
        0,0,0,151,152,6,8,4,0,152,22,1,0,0,0,153,154,5,58,0,0,154,155,5,
        97,0,0,155,156,5,102,0,0,156,157,5,116,0,0,157,158,5,101,0,0,158,
        159,5,114,0,0,159,24,1,0,0,0,160,161,5,58,0,0,161,162,5,98,0,0,162,
        163,5,101,0,0,163,164,5,102,0,0,164,165,5,111,0,0,165,166,5,114,
        0,0,166,167,5,101,0,0,167,26,1,0,0,0,168,169,5,58,0,0,169,170,5,
        98,0,0,170,171,5,101,0,0,171,172,5,116,0,0,172,173,5,119,0,0,173,
        174,5,101,0,0,174,175,5,101,0,0,175,176,5,110,0,0,176,28,1,0,0,0,
        177,178,5,58,0,0,178,179,5,101,0,0,179,180,5,108,0,0,180,181,5,115,
        0,0,181,182,5,101,0,0,182,30,1,0,0,0,183,184,5,58,0,0,184,185,5,
        101,0,0,185,186,5,108,0,0,186,187,5,115,0,0,187,188,5,101,0,0,188,
        189,5,105,0,0,189,190,5,102,0,0,190,32,1,0,0,0,191,192,5,58,0,0,
        192,193,5,101,0,0,193,194,5,110,0,0,194,195,5,100,0,0,195,34,1,0,
        0,0,196,197,5,58,0,0,197,198,5,101,0,0,198,199,5,115,0,0,199,200,
        5,99,0,0,200,201,5,97,0,0,201,202,5,112,0,0,202,203,5,101,0,0,203,
        36,1,0,0,0,204,205,5,58,0,0,205,206,5,102,0,0,206,207,5,105,0,0,
        207,208,5,108,0,0,208,209,5,116,0,0,209,210,5,101,0,0,210,211,5,
        114,0,0,211,38,1,0,0,0,212,213,5,58,0,0,213,214,5,105,0,0,214,215,
        5,102,0,0,215,40,1,0,0,0,216,217,5,58,0,0,217,218,5,105,0,0,218,
        219,5,116,0,0,219,220,5,101,0,0,220,221,5,114,0,0,221,222,5,97,0,
        0,222,223,5,116,0,0,223,224,5,101,0,0,224,42,1,0,0,0,225,226,5,58,
        0,0,226,227,5,119,0,0,227,228,5,105,0,0,228,229,5,116,0,0,229,230,
        5,104,0,0,230,44,1,0,0,0,231,232,5,115,0,0,232,233,5,116,0,0,233,
        234,5,114,0,0,234,235,5,105,0,0,235,236,5,110,0,0,236,266,5,103,
        0,0,237,238,5,110,0,0,238,239,5,117,0,0,239,240,5,109,0,0,240,241,
        5,98,0,0,241,242,5,101,0,0,242,266,5,114,0,0,243,244,5,111,0,0,244,
        245,5,98,0,0,245,246,5,106,0,0,246,247,5,101,0,0,247,248,5,99,0,
        0,248,266,5,116,0,0,249,250,5,97,0,0,250,251,5,114,0,0,251,252,5,
        114,0,0,252,253,5,97,0,0,253,266,5,121,0,0,254,255,5,98,0,0,255,
        256,5,111,0,0,256,257,5,111,0,0,257,258,5,108,0,0,258,259,5,101,
        0,0,259,260,5,97,0,0,260,266,5,110,0,0,261,262,5,110,0,0,262,263,
        5,117,0,0,263,264,5,108,0,0,264,266,5,108,0,0,265,231,1,0,0,0,265,
        237,1,0,0,0,265,243,1,0,0,0,265,249,1,0,0,0,265,254,1,0,0,0,265,
        261,1,0,0,0,266,46,1,0,0,0,267,268,5,97,0,0,268,269,5,110,0,0,269,
        270,5,100,0,0,270,48,1,0,0,0,271,272,5,101,0,0,272,273,5,120,0,0,
        273,274,5,105,0,0,274,275,5,115,0,0,275,276,5,116,0,0,276,277,5,
        115,0,0,277,50,1,0,0,0,278,279,5,105,0,0,279,280,5,115,0,0,280,52,
        1,0,0,0,281,282,5,110,0,0,282,283,5,111,0,0,283,284,5,116,0,0,284,
        54,1,0,0,0,285,286,5,111,0,0,286,287,5,114,0,0,287,56,1,0,0,0,288,
        289,5,40,0,0,289,58,1,0,0,0,290,291,5,41,0,0,291,60,1,0,0,0,292,
        293,5,46,0,0,293,62,1,0,0,0,294,295,5,91,0,0,295,64,1,0,0,0,296,
        297,5,93,0,0,297,66,1,0,0,0,298,299,5,94,0,0,299,68,1,0,0,0,300,
        301,5,58,0,0,301,70,1,0,0,0,302,303,5,124,0,0,303,72,1,0,0,0,304,
        305,5,37,0,0,305,306,1,0,0,0,306,307,6,34,5,0,307,74,1,0,0,0,308,
        320,5,48,0,0,309,311,5,45,0,0,310,309,1,0,0,0,310,311,1,0,0,0,311,
        312,1,0,0,0,312,316,7,2,0,0,313,315,7,3,0,0,314,313,1,0,0,0,315,
        318,1,0,0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,320,1,0,0,0,318,
        316,1,0,0,0,319,308,1,0,0,0,319,310,1,0,0,0,320,76,1,0,0,0,321,323,
        7,4,0,0,322,321,1,0,0,0,323,324,1,0,0,0,324,322,1,0,0,0,324,325,
        1,0,0,0,325,78,1,0,0,0,326,327,5,48,0,0,327,80,1,0,0,0,328,329,5,
        46,0,0,329,82,1,0,0,0,330,334,7,2,0,0,331,333,7,3,0,0,332,331,1,
        0,0,0,333,336,1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,84,1,0,
        0,0,336,334,1,0,0,0,337,338,7,5,0,0,338,339,1,0,0,0,339,340,6,40,
        3,0,340,86,1,0,0,0,341,342,7,6,0,0,342,88,1,0,0,0,343,351,5,92,0,
        0,344,352,7,7,0,0,345,346,5,117,0,0,346,347,3,87,41,0,347,348,3,
        87,41,0,348,349,3,87,41,0,349,350,3,87,41,0,350,352,1,0,0,0,351,
        344,1,0,0,0,351,345,1,0,0,0,352,90,1,0,0,0,353,354,5,34,0,0,354,
        355,1,0,0,0,355,356,6,43,3,0,356,92,1,0,0,0,357,358,9,0,0,0,358,
        94,1,0,0,0,16,0,1,2,3,4,102,124,127,145,265,310,316,319,324,334,
        351,6,6,0,0,5,1,0,5,2,0,4,0,0,5,4,0,5,3,0
    ]

class FoostacheLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    inLiteral = 1
    inTag = 2
    inNumSpec = 3
    inQuotedString = 4

    COMMENT = 1
    OPENL = 2
    OPEN = 3
    TEXT = 4
    CLOSEL = 5
    TEXTL = 6
    CLOSE = 7
    WS = 8
    OPENQS = 9
    AFTER = 10
    BEFORE = 11
    BETWEEN = 12
    ELSE = 13
    ELSEIF = 14
    END = 15
    ESCAPE = 16
    FILTER = 17
    IF = 18
    ITERATE = 19
    WITH = 20
    TYPE = 21
    AND = 22
    EXISTS = 23
    IS = 24
    NOT = 25
    OR = 26
    LPAREN = 27
    RPAREN = 28
    DOT = 29
    LBRACKET = 30
    RBRACKET = 31
    CARET = 32
    COLON = 33
    PIPE = 34
    PERCENT = 35
    INTEGER = 36
    ID = 37
    ZERO = 38
    DOTN = 39
    PINTEGERN = 40
    NUMBER_SPECIFIER = 41
    ESCCHARQS = 42
    CLOSEQS = 43
    CHARQS = 44

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "inLiteral", "inTag", "inNumSpec", "inQuotedString" ]

    literalNames = [ "<INVALID>",
            "'{{\"'", "'{{'", "'\"}}'", "'}}'", "':after'", "':before'", 
            "':between'", "':else'", "':elseif'", "':end'", "':escape'", 
            "':filter'", "':if'", "':iterate'", "':with'", "'and'", "'exists'", 
            "'is'", "'not'", "'or'", "'('", "')'", "'['", "']'", "'^'", 
            "':'", "'|'", "'%'", "'0'" ]

    symbolicNames = [ "<INVALID>",
            "COMMENT", "OPENL", "OPEN", "TEXT", "CLOSEL", "TEXTL", "CLOSE", 
            "WS", "OPENQS", "AFTER", "BEFORE", "BETWEEN", "ELSE", "ELSEIF", 
            "END", "ESCAPE", "FILTER", "IF", "ITERATE", "WITH", "TYPE", 
            "AND", "EXISTS", "IS", "NOT", "OR", "LPAREN", "RPAREN", "DOT", 
            "LBRACKET", "RBRACKET", "CARET", "COLON", "PIPE", "PERCENT", 
            "INTEGER", "ID", "ZERO", "DOTN", "PINTEGERN", "NUMBER_SPECIFIER", 
            "ESCCHARQS", "CLOSEQS", "CHARQS" ]

    ruleNames = [ "COMMENT", "OPENL", "OPEN", "TEXT", "CLOSEL", "TEXTL", 
                  "CLOSE", "WS", "OPENQS", "AFTER", "BEFORE", "BETWEEN", 
                  "ELSE", "ELSEIF", "END", "ESCAPE", "FILTER", "IF", "ITERATE", 
                  "WITH", "TYPE", "AND", "EXISTS", "IS", "NOT", "OR", "LPAREN", 
                  "RPAREN", "DOT", "LBRACKET", "RBRACKET", "CARET", "COLON", 
                  "PIPE", "PERCENT", "INTEGER", "ID", "ZERO", "DOTN", "PINTEGERN", 
                  "NUMBER_SPECIFIER", "HEXDIGIT", "ESCCHARQS", "CLOSEQS", 
                  "CHARQS" ]

    grammarFileName = "FoostacheLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


