# https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
[build-system]
requires = ["setuptools", "wheel", "build", "setuptools_scm[toml]"]
build-backend = "setuptools.build_meta"

# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
[project]
name = "connectwise-client"
authors = [
    {name = "Papa Bear Codes Python", email = "papa.bear.codes.python@gmail.com"},
]
description = "Project to download data from Connectwise using the api client."
readme = "README.md"
keywords = ["connectwise", "api client"]
requires-python = ">=3.11"
license = {file = "LICENSE"}
dynamic = ["version", "dependencies", "optional-dependencies"]

[project.urls]
homepage = "https://github.com/papabearcodespython/connectwise_client"
documentation = "https://github.com/papabearcodespython/connectwise_client/blob/main/README.md"
repository = "https://github.com/papabearcodespython/connectwise_client.git"
changelog = "https://github.com/papabearcodespython/connectwise_client/blob/main/CHANGELOG.md"

# Indicates to use setuptools_scm plus git tags applied by UPF semantic release to get package version
# Eliminates the need to manually update a version in the __init.py__ file.
# https://pypi.org/project/setuptools-scm/
[tool.setuptools_scm]

[tool.setuptools.dynamic]
# For libraries, we use the input dependencies, which should generally be un- or soft-pinned (lower bounds only)
# For apps/Deployables (like this sandbox app), use the requirements.txt files, to pin more specifically.
# For the "in" version, we need to use the file including "no-args" in the suffix, as setuptools doesn't allow
# the args we need for the cross-requirement dependency resolution to work.
dependencies = {file = "requirements/requirements.txt"}

[tool.setuptools.dynamic.optional-dependencies]
# Always use pinned dependencies for development/CI.
development = {file = "requirements/development.txt"}

[tool.black]
line-length = 120
exclude = '''
    venv/
    | build/
'''

# https://pylint.readthedocs.io/en/latest/user_guide/configuration/all-options.html
[tool.pylint.main]
enable = ["c-extension-no-member"]
evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
# https://pylint.pycqa.org/en/v2.13.9/messages/messages_list.html
disable = [
     "W0511", # (fixme)
     "R0801", # (duplicate-code)
]
ignore-patterns = ["venv/*,build/*"]
recursive = true

[tool.pylint.design]
max-args = 6

[tool.pylint.format]
max-line-length=120

[tool.pylint.typecheck]
ignored-classes = ["optparse.Values", "thread._local", "_thread._local"]

# https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
ignore_missing_imports = true
disallow_untyped_defs = true
cache_dir = ".cache/.mypy_cache"
exclude = [
    'venv/',
    'build/',
    'src/.egg-info',
]

[tool.pydocstyle]
match-dir = '[src,tests].*'

[tool.pytest.ini_options]
pythonpath = "src"
addopts = "-rA -q --import-mode=importlib --cov --cov-branch --cov-report=html"
cache_dir = ".cache/.pytest_cache"
testpaths = [
    "tests/"
]

# https://coverage.readthedocs.io/en/6.5.0/config.html#report
[tool.coverage.report]
skip_covered = true
fail_under = 90
exclude_lines = [
    # TYPE_CHECKING block is never executed during pytest run
    "if TYPE_CHECKING:"
]

# https://coverage.readthedocs.io/en/6.5.0/config.html#report
[tool.coverage.html]
directory = "cov_html"

# https://coverage.readthedocs.io/en/6.5.0/config.html#run
[tool.coverage.run]
source = ["src"]
omit = [
    "build/*",
    "tests/*",
    "venv/*",
]
